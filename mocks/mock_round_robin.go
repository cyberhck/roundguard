// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cyberhck/roundguard/pkg/rebalancer (interfaces: LoadBalancer)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_round_robin.go -package mocks -typed github.com/cyberhck/roundguard/pkg/rebalancer LoadBalancer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	httputil "net/http/httputil"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLoadBalancer is a mock of LoadBalancer interface.
type MockLoadBalancer struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerMockRecorder
	isgomock struct{}
}

// MockLoadBalancerMockRecorder is the mock recorder for MockLoadBalancer.
type MockLoadBalancerMockRecorder struct {
	mock *MockLoadBalancer
}

// NewMockLoadBalancer creates a new mock instance.
func NewMockLoadBalancer(ctrl *gomock.Controller) *MockLoadBalancer {
	mock := &MockLoadBalancer{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancer) EXPECT() *MockLoadBalancerMockRecorder {
	return m.recorder
}

// ResetWithNewItems mocks base method.
func (m *MockLoadBalancer) ResetWithNewItems(arg0 []*httputil.ReverseProxy) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetWithNewItems", arg0)
}

// ResetWithNewItems indicates an expected call of ResetWithNewItems.
func (mr *MockLoadBalancerMockRecorder) ResetWithNewItems(arg0 any) *MockLoadBalancerResetWithNewItemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetWithNewItems", reflect.TypeOf((*MockLoadBalancer)(nil).ResetWithNewItems), arg0)
	return &MockLoadBalancerResetWithNewItemsCall{Call: call}
}

// MockLoadBalancerResetWithNewItemsCall wrap *gomock.Call
type MockLoadBalancerResetWithNewItemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoadBalancerResetWithNewItemsCall) Return() *MockLoadBalancerResetWithNewItemsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoadBalancerResetWithNewItemsCall) Do(f func([]*httputil.ReverseProxy)) *MockLoadBalancerResetWithNewItemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoadBalancerResetWithNewItemsCall) DoAndReturn(f func([]*httputil.ReverseProxy)) *MockLoadBalancerResetWithNewItemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
